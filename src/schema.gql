# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Player {
  id: ID!
  userId: String!
  gameId: String!
  points: Float!
  rewards: [PlayerReward!]!
}

type Game {
  id: ID!
  name: String!
  description: String
  gedilLayerId: String
  gedilLayerDescription: String
  startDate: Date
  endDate: Date
}

"""Date custom scalar type"""
scalar Date

type Challenge {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  difficulty: Difficulty!
  mode: Mode!
  modeParameters: [String!]!
  refs: [String!]!
  locked: Boolean!
  hidden: Boolean!
}

enum Difficulty {
  BEGINNER
  EASY
  AVERAGE
  HARD
  MASTER
}

enum Mode {
  NORMAL
  SHAPESHIFTER
  SHORTENING
  SPEEDUP
  HACK_IT
  TIME_BOMB
  DUEL
}

type Reward {
  id: ID!
  game: Game
  parentChallenge: Challenge
  kind: RewardType!
  name: String!
  description: String
  image: String
  recurrent: Boolean!
  cost: Float!
  amount: Float!
  challenges: [Challenge!]!
  message: String!
  players: [PlayerReward!]!
}

enum RewardType {
  POINT
  BADGE
  VIRTUAL_ITEM
  COUPON
  REVEAL
  UNLOCK
  HINT
  MESSAGE
}

type PlayerReward {
  id: ID!
  players: Player!
  rewards: Reward!
  count: Float!
}

type User {
  id: ID!
  name: String!
  username: String!
  email: Email!
  roles: [Role!]!
  photo: String
  telephone: String
  birthDate: Date
  createdAt: Date!
  updatedAt: Date!
  players: [PlayerReward!]!
}

"""Email custom scalar type"""
scalar Email

enum Role {
  USER
  ADMIN
}

type ListUsers {
  items: [User!]!
  total: Int!
}

type Action {
  type: Category!
  parameters: [String!]!
}

enum Category {
  GIVE
  TAKE
  UPDATE
}

type Condition {
  order: Float!
  leftEntity: String!
  leftProperty: String!
  comparingFunction: String!
  rightEntity: String!
  rightProperty: String!
}

type Criteria {
  conditions: [Condition!]!
  junctors: [Junctor!]!
}

enum Junctor {
  AND
  OR
}

type ScheduledHook {
  id: ID
  game: Game
  parentChallenge: Challenge
  criteria: Criteria
  actions: [Action!]
  recurrent: Boolean
  cron: String
  interval: Float
  active: Boolean
  lastRun: Date
}

type ActionHook {
  id: ID
  game: Game
  parentChallenge: Challenge
  trigger: TriggerEvent
  sourceId: String
  criteria: Criteria
  actions: [Action!]
  recurrent: Boolean
  active: Boolean
  lastRun: Date
}

enum TriggerEvent {
  SUBMISSION_EVALUATED
  SUBMISSION_RECEIVED
  SUBMISSION_ACCEPTED
  SUBMISSION_REJECTED
  CHALLENGE_COMPLETED
  CHALLENGE_FAILED
  REWARD_GRANTED
  PLAYER_UPDATED
  POINTS_UPDATED
  DUEL_INVITATION_RECEIVED
  DUEL_INITIATED
  DUEL_ACCEPTED
  DUEL_REJECTED
  DUEL_COMPLETED
}

type ChallengeStatus {
  studentId: String!
  challengeId: String!
  gameId: String!
  startedAt: Date
  endedAt: Date
  state: [State!]!
  openedAt: Date
}

enum State {
  LOCKED
  HIDDEN
  OPENED
  FAILED
  COMPLETED
  REJECTED
}

type Submission {
  id: ID!
  exerciseId: String!
  playerId: String!
  gameId: String!
  metrics: JSON
  result: Result
  grade: Float
  feedback: String
  submittedAt: Date!
  evaluatedAt: Date
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum Result {
  ACCEPTED
  REJECTED
}

type Query {
  user(id: String!): User!
  users(skip: Int = 0, take: Int = 50, ids: [ID!], name: String, order: String = "DESC", fieldSort: String = "updatedAt"): ListUsers!
  queryCheck: String!
  scheduledHooks: [ScheduledHook!]!
  actionHooks: [ActionHook!]!
  rewards: [Reward!]!
  challenges: [Challenge!]!
  game(id: String!): Game!
  get(challengeId: String!, studentId: String!): ChallengeStatus!
  submission(submissionId: String!): Submission!
  submissions(exerciseId: String!): [Submission!]!
}

type Mutation {
  saveUser(id: ID, userInput: CreateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  login(login: String!, password: String!): User!
  signup(name: String!, username: String!, email: Email!, password: String!): User!
  mutationCheck: String!
  importGEdILArchive(name: String!, description: String, startDate: Date, endDate: Date, users: [String!], file: Upload!): Game!
  createSubmission(id: String!, gameId: String!, exerciseId: String!, playerId: String!, codeFile: String!): Submission!
}

input CreateUserInput {
  name: String!
  username: String!
  email: Email!
  telephone: String
  birthDate: Date
  roles: [Role!] = [USER]
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
