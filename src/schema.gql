# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Reward {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  kind: RewardType!
  name: String!
  description: String
  image: String
  recurrent: Boolean!
  cost: Float
  amount: Float
  message: String
  challenges: [Challenge!]
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

enum RewardType {
  POINT
  BADGE
  VIRTUAL_ITEM
  COUPON
  REVEAL
  UNLOCK
  HINT
  MESSAGE
}

"""Date custom scalar type"""
scalar Date

type PlayerReward {
  id: ID!
  player: Player!
  reward: Reward!
  count: Float!
}

type Submission {
  id: ID!
  game: Game!
  player: Player!
  exerciseId: String!
  evaluationEngine: EvaluationEngine
  evaluationEngineId: String
  language: String
  metrics: JSON
  result: Result
  grade: Float
  feedback: String
  submittedAt: Date!
  evaluatedAt: Date
  createdAt: Date!
  updatedAt: Date
}

enum EvaluationEngine {
  MOOSHAK
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum Result {
  PROCESSING
  ACCEPT
  WRONG_ANSWER
  TIMEOUT
  OUTPUT_LIMIT_OVERFLOW
  COMPILATION_ERROR
  RUNTIME_ERROR
  RESOURCE_USAGE_EXCEEDED
  ASK_FOR_REEVALUATION
}

type ChallengeStatus {
  id: ID!
  player: Player!
  challenge: Challenge!
  startedAt: Date
  openedAt: Date
  endedAt: Date
  state: State!
}

enum State {
  AVAILABLE
  LOCKED
  HIDDEN
  OPENED
  FAILED
  COMPLETED
  REJECTED
}

type Group {
  id: ID!
  game: Game!
  name: String!
  displayName: String
  imageUrl: String
  players: [Player!]!
  createdAt: Date!
  updatedAt: Date
}

type User {
  id: String
  emailVerified: Boolean
  username: String
  email: String
  firstName: String
  lastName: String
}

type Player {
  id: ID!
  game: Game!
  user: User!
  group: Group
  points: Float!
  submissions: [Submission!]!
  learningPath: [ChallengeStatus!]!
  rewards: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Game {
  id: ID!
  name: String!
  description: String
  gedilLayerId: String
  gedilLayerDescription: String
  startDate: Date
  endDate: Date
  instructors: [User!]!
  players: [Player!]!
  submissions: [Submission!]!
  createdAt: Date!
  updatedAt: Date
}

type Challenge {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  difficulty: Difficulty!
  mode: Mode!
  modeParameters: [String!]!
  refs: [String!]!
  locked: Boolean!
  hidden: Boolean!
  createdAt: Date!
  updatedAt: Date
}

enum Difficulty {
  BEGINNER
  EASY
  AVERAGE
  HARD
  MASTER
}

enum Mode {
  NORMAL
  SHAPESHIFTER
  SHORTENING
  SPEEDUP
  HACK_IT
  TIME_BOMB
  DUEL
}

type Badge {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  image: String
  recurrent: Boolean!
  cost: Float
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Coupon {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  image: String
  recurrent: Boolean!
  cost: Float
  amount: Float
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Hint {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  image: String
  recurrent: Boolean!
  cost: Float
  message: String
  challenges: [Challenge!]
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Message {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  image: String
  recurrent: Boolean!
  cost: Float
  message: String
  challenges: [Challenge!]
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Point {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  recurrent: Boolean!
  amount: Float
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type VirtualItem {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  image: String
  recurrent: Boolean!
  cost: Float
  amount: Float
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Unlock {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  recurrent: Boolean!
  cost: Float
  challenges: [Challenge!]!
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Reveal {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  name: String!
  description: String
  recurrent: Boolean!
  cost: Float
  challenges: [Challenge!]!
  players: [PlayerReward!]!
  createdAt: Date!
  updatedAt: Date
}

type Condition {
  order: Float!
  leftEntity: String!
  leftProperty: String!
  comparingFunction: ComparingFunction!
  rightEntity: String!
  rightProperty: String!
}

enum ComparingFunction {
  LESS_THAN
  GREATER_THAN
  LESS_OR_EQUAL
  GREAT_OR_EQUAL
  EQUAL
  NOT_EQUAL
  STARTS_WITH
  MATCHES
  NOT_MATCHES
  IS_EMPTY
  NOT_EMPTY
  IN
  NOT_IN
}

type Criteria {
  conditions: [Condition!]!
  junctors: [Junctor!]!
}

enum Junctor {
  AND
  OR
}

type Action {
  type: Category!
  parameters: [String!]!
}

enum Category {
  GIVE
  TAKE
  UPDATE
}

type ActionHook {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  trigger: TriggerEvent!
  sourceId: String
  criteria: Criteria
  actions: [Action!]!
  recurrent: Boolean!
  active: Boolean!
  lastRun: Date
  createdAt: Date!
  updatedAt: Date
}

enum TriggerEvent {
  SUBMISSION_EVALUATED
  SUBMISSION_RECEIVED
  SUBMISSION_ACCEPTED
  SUBMISSION_REJECTED
  CHALLENGE_AVAILABLE
  CHALLENGE_OPENED
  CHALLENGE_HIDDEN
  CHALLENGE_LOCKED
  CHALLENGE_REJECTED
  CHALLENGE_COMPLETED
  CHALLENGE_FAILED
  REWARD_GRANTED
  PLAYER_ENROLLED
  PLAYER_LEFT
  PLAYER_UPDATED
  POINTS_UPDATED
  DUEL_INVITATION_RECEIVED
  DUEL_INITIATED
  DUEL_ACCEPTED
  DUEL_REJECTED
  DUEL_COMPLETED
}

type ScheduledHook {
  id: ID!
  game: Game!
  parentChallenge: Challenge
  criteria: Criteria
  actions: [Action!]!
  recurrent: Boolean!
  cron: String
  interval: Float
  active: Boolean!
  lastRun: Date
  createdAt: Date!
  updatedAt: Date
}

type Leaderboard {
  id: ID
  game: Game
  parentChallenge: Challenge
  name: String
  groups: Boolean
  metrics: [String!]
  sortingOrders: [SortingOrder!]
  createdAt: Date!
  updatedAt: Date
}

enum SortingOrder {
  ASC
  DESC
}

type Ranking {
  player: Player
  score: JSON!
}

type Auth {
  accessToken: String
  expiresIn: Int
  message: String
  refreshExpiresIn: Int
  refreshToken: String
  scope: String
  tokenType: String
}

type LogoutResponse {
  message: String
}

type Profile {
  id: String
  emailVerified: Boolean
  username: String
  email: String
  firstName: String
  lastName: String
}

type Query {
  alive: String!
  rewards(gameId: String!): [Reward!]!
  badges(gameId: String!): [Badge!]!
  coupons(gameId: String!): [Coupon!]!
  hints(gameId: String!): [Hint!]!
  messages(gameId: String!): [Message!]!
  points(gameId: String!): [Point!]!
  virtualItems(gameId: String!): [VirtualItem!]!
  unlocks(gameId: String!): [Unlock!]!
  reveals(gameId: String!): [Reveal!]!
  submission(id: String!, gameId: String!): Submission!
  submissions(exerciseId: String, gameId: String!, userId: String!): [Submission!]!
  mySubmissions(exerciseId: String, gameId: String!): [Submission!]!
  groups(gameId: String!): [Group!]!
  group(id: String!, gameId: String!): Group!
  groupInGame(gameId: String!): Group!
  players(gameId: String!): [Player!]!
  profileInGame(gameId: String!): Player!
  player(userId: String!, gameId: String!): Player!
  challengeStatus(challengeId: String!, playerId: String!): ChallengeStatus!
  myChallengeStatus(challengeId: String!): ChallengeStatus!
  actionHooks(gameId: String!): [ActionHook!]!
  scheduledHooks(gameId: String!): [ScheduledHook!]!
  leaderboards(gameId: String!): [Leaderboard!]!
  leaderboard(id: String!, gameId: String!): Leaderboard!
  rankings(leaderboardId: String!, gameId: String!): [Ranking!]!
  groupRankings(leaderboardId: String!, gameId: String!): [Ranking!]!
  challenges(gameId: String!): [Challenge!]!
  challenge(id: String!, gameId: String!): Challenge!
  games: [Game!]!
  game(id: String!): Game!
  me: Profile!
  user(id: String!): User!
  users: [User!]!
  usersByRole(role: String!): [User!]!
}

type Mutation {
  evaluate(gameId: String!, exerciseId: String!, file: Upload!): Submission
  saveGroup(id: ID, groupInput: GroupInput!, gameId: String!): Group!
  autoAssignGroups(gameId: String!): [Group!]!
  enroll(gameId: String!): Player!
  addToGame(gameId: String!, userId: String!): Player!
  removeFromGame(gameId: String!, userId: String!): Player!
  setGroup(groupId: String!, playerId: String!, gameId: String!): Player!
  importGEdILArchive(gameInput: GameInput!, file: Upload!): Game!
  assignInstructor(userId: String!, gameId: String!): Game!
  login(username: String, password: String, scope: String, refreshToken: String, redirectUri: String): Auth!
  logout(redirectUri: String): LogoutResponse!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input GroupInput {
  name: String!
  displayName: String
  imageUrl: String
}

input GameInput {
  name: String!
  description: String
  gedilLayerId: String
  gedilLayerDescription: String
  startDate: Date
  endDate: Date
}

type Subscription {
  rewardReceived: Reward!
  rewardRemoved: Reward!
  rewardSubtracted: Reward!
  submissionEvaluated: Submission!
  submissionSent: Submission!
  playerEnrolled: Player!
  playerLeft: Player!
  pointsUpdated: Float!
  challengeStatusUpdated: ChallengeStatus!
}
